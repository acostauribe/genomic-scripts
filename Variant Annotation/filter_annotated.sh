#!/bin/bash
## Script to filter an annotated vcf generated by script annotate.sh
## Juliana Acosta-Uribe September 2025

# After setting up what you need, run this script as follows: 
## chmod u+x annotate_variants.sh
## ./annotate_variants.sh | tee annotate_variants.log

# Provide a vcf:
vcf_file='HALB3075998' 
# accepts .vcf or .vcf.gz

# FILTER ANNOTATED VARIANTS
### Filter annotated variants in "*.hg38_multianno.txt" or "*.hg38_multianno.counts.txt" based on prefered settings. 

## Extract a subset of genes you are interested in.
extract_genes=FALSE
## Provide a text file named gene_list with one gene name per line.
gene_list=''
## In addition to the filtering set before, this will generate a subset with all the annotations in the gene_list

## Extract variants that have been reported as "Pathogenic" or "Likely pathogenic" in ClinVar.
## Generates annotated_file.ClinVar-Pathogenic.txt
extract_pathogenic='TRUE'
## You can extract reported pathogenic variants in all the data, or in a subset of genes (see line 82)

## Get Exonic Variants and Intronic variants may have impact on splicing (based on dbscSNV_RF_SCORE and dbscSNV_ADA_SCORE)
## Generates annotated_file.coding.txt
extract_coding='TRUE'

## Exclude synonymous mutations. 
## Generates annotated_file.non-syn.txt
remove_synonymous='FALSE'

## Extract variants with low allelic frequency and high CADD score for manual curation
## Generates annotated_file.manual-curation.txt 
manual_curation='TRUE'
## Define the CADD and MAF thresholds
MAF_filter='0.01'
CADD_filter='20'
## Variants with missing MAF or CADD information will be retained for manual curation"
## If the value is a '.' or a blank, it will be printed out as well.
## Ensure MAF_filter and CADD_filter are properly defined as numeric values

## The order of these filterings is extract_genes > extract_pathogenic ; extract_genes > extract_coding > remove_synonymous > manual_curation
## You can remove a step, but the order will be kept



#================SCRIPT

echo "Starting" $(date)



# Search for a previuosly annotated file
annovar_file=($(find . -maxdepth 1 -type f -name "*.hg38_multianno.txt" ))
 # Check the number of files found
if [[ ${#annovar_file[@]} -eq 1 ]]; then
    # There is one file found, assign to annovar_file
    annovar_file="${annovar_file[0]}"
        if [[ -s "$annovar_file" ]]; then
            echo "ANNOVAR file found"
            annovar_file="${annovar_file%.txt}"
        else
            echo "$annovar_file is not readable. Stopping script"
            return 1  # return with a status code of 1 to indicate an error.
        fi
    elif [[ ${#annovar_file[@]} -gt 1 ]]; then
            # More than one file found, raise a warning
        echo "Warning: More than one ANNOVAR file found. Keep ony one file ending in '.hg38_multianno.counts.txt or .hg38_multianno.txt' in the working directory"
        echo "Stopping script"
        return 1  # return with a status code of 1 to indicate an error.
    else
        # If no file was found, raise a warning
        echo "Provide a valid ANNOVAR file for variant filtering. Script requires one file ending in '.hg38_multianno.txt' in the working directory"
        echo "Stopping script"
        return 1  # return with a status code of 1 to indicate an error.
fi
    
echo "Filtering annotated variants in ${annovar_file}.txt"

## 1. Count number of variants
echo "Number of variants in ${annovar_file}.txt:"
wc -l "${annovar_file}.txt" | awk '{print $1-1}' # Subtract the header line to get the number of variants

## 2. Extract variants in a subset of genes 
if [[ $extract_genes == 'TRUE' ]]; then
    echo "Extracting variants in ${gene_list}"
    awk -v OFS='\t' 'NR==FNR {genes[$1]; next} FNR==1 {print; next} {if ($7 in genes) print}' "$gene_list" "${annovar_file}.txt" > "${annovar_file}.gene_list.txt"
    annovar_file="${annovar_file}.gene_list"
    echo "Number of variants in ${annovar_file}.txt:"
    wc -l "${annovar_file}.txt" | awk '{print $1-1}'
fi

    ## 3. Extract variants that have been reported as "Pathogenic" or "Likely pathogenic" in ClinVar
if [[ $extract_pathogenic == 'TRUE' ]]; then
    echo "Extracting variants that have been reported as pathogenic in ClinVar"
    echo "Warning: Pathogenic variants are reported as of March 20 2022"
    awk -v OFS='\t' 'FNR==1 || (NR > 1 && /athogenic/ && !/Conflicting/)' "${annovar_file}.txt" > "${annovar_file}.ClinVar-Pathogenic.txt"
    echo "Number of variants in ${annovar_file}.ClinVar-Pathogenic.txt:"
    wc -l "${annovar_file}.ClinVar-Pathogenic.txt" | awk '{print $1-1}'
fi

## 4. Get Exonic and Splicing variants.
if [[ $extract_coding == 'TRUE' ]]; then
    echo "Retaining Exonic and Splicing variants"
    awk -F '\t' 'NR==1 || (($6 == "exonic") || ($6 == "exonic;splicing") || ($6 == "splicing")) || (($115 >= 0.6 && $115 != ".") || ($116 >= 0.6 && $116 != "."))' "${annovar_file}.txt" > "${annovar_file}.coding.txt"
    annovar_file="${annovar_file}.coding"
    echo "Number of variants in ${annovar_file}.txt:"
    wc -l "${annovar_file}.txt" | awk '{print $1-1}'
fi

    ## 5. Exclude synonymous mutations
if [[ $remove_synonymous == 'TRUE' ]]; then
    echo "Removing synonymous variants"
    awk -v OFS='\t' 'NR==1; NR > 1{ if(($9 != "synonymous SNV") && ($6 != "unknown")) { print } }' "${annovar_file}.txt" > "${annovar_file}.non-syn.txt"
    annovar_file="${annovar_file}.non-syn"
    echo "Number of variants in ${annovar_file}.txt:"
    wc -l "${annovar_file}.txt" | awk '{print $1-1}'
fi


    ## 6. Extract variants with low allelic frequency and high CADD score
if [[ $manual_curation == 'TRUE' ]]; then
    echo "Extracting coding variants for manual curation"
    echo "Warning! Variants with missing MAF or CADD information will be retained for manual curation"
    # Ensure MAF_filter and CADD_filter are properly defined as numeric values
    awk -v OFS='\t' -v MAF="$MAF_filter" -v CADD="$CADD_filter" 'NR==1; NR > 1{ if((($16 == "." || $16 <= MAF) && ($25 == "." || $25 <= MAF)) && ($74 == "." || $74 >= CADD)) {print} }' \
    "${annovar_file}.txt" > "${annovar_file}.manual-curation.txt"
    echo "Number of variants in ${annovar_file}.manual-curation.txt:"
    wc -l "${annovar_file}.manual-curation.txt" | awk '{print $1-1}'
fi


## Store annotations in their own directory
echo "Creating a directory for annotations"
mkdir ANNOVAR
mv ${annovar_file}.* ./ANNOVAR
mv filter_variants.* ./ANNOVAR
mv ANNOVAR ANNOVAR_$(date "+%Y%m%d")

echo "Finished" $(date)
